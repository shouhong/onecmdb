<?xml version="1.0" encoding="UTF-8"?>

<onecmdb>
	<templates>
		<!-- References -->
		<template alias="CIReference" displayName="CIReference">
			<derivedFrom>
				<ref alias="Reference"/>
			</derivedFrom>
			<description>Master template for ci references.</description>
		</template>
		
		<template alias="BelongsTo" id="6732577159285719988" displayName="${source} belongs to ${target}">
			<derivedFrom>
				<ref alias="CIReference"/>
			</derivedFrom>
			<description>Reference describes that the source belongs to the target.</description>
			<setSimpleValue attAlias="icon" >reference</setSimpleValue>
		</template>
	
		<!-- Nagios Templates -->
		
		<template alias="Monitoring" displayName="Monitoring">
			<derivedFrom>
				<ref alias="Ci"/>
			</derivedFrom>
			<setSimpleValue attAlias="icon">monitoring</setSimpleValue>
		</template>
		
		<template alias="NAGIOS" displayName="NAGIOS">
			<derivedFrom>
				<ref alias="Monitoring"/>
			</derivedFrom>
			<attribute attAlias="register">
				<description>If this entry should be an instances and a template.</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="use">
				<description>The template this nagios config entry should derived from.</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="name">
				<description>The template name referenced with the use attribute.</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="useName">
				<description>If the instance should include it's name. Eq if this instance is used by another instance.</description>
				<simpleType>xs:boolean</simpleType>
			</attribute>
			
			<attribute attAlias="objectType">
				<description>The object definition name.</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			
			
		</template>
		
		<template alias="NAGIOS_Service" displayName="${service_description} Service">
			<derivedFrom>
				<ref alias="NAGIOS"/>
			</derivedFrom>
			<attribute attAlias="host_name">
				<description>This directive is used to specify the short name(s)
					of the host(s) that the service "runs" on or is
					associated with. Multiple hosts should be separated
					by commas. 
				</description>
				<complexType>
					<ref alias="NAGIOS_Host"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
			<attribute attAlias="hostgroup_name">
				<description>This directive is used to specify the short name(s)
					of the hostgroup(s) that the service "runs" on or is
					associated with. Multiple hostgroups should be
					separated by commas. The hostgroup_name may be used
					instead of, or in addition to, the host_name
					directive.
				</description>
				<complexType>
					<ref alias="NAGIOS_Hostgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
			<attribute attAlias="service_description">
				<description>This directive is used to define the description of
					the service, which may contain spaces, dashes, and
					colons (semicolons, apostrophes, and quotation marks
					should be avoided). No two services associated with
					the same host can have the same description.
					Services are uniquely identified with their
					host_name and service_description directives.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="display_name">
				<description>This directive is used to define an alternate name
					that should be displayed in the web interface for
					this service. If not specified, this defaults to the
					value you specify for the service_description
					directive. Note: The current CGIs do not use this
					option, although future versions of the web
					interface will.

				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="servicegroups">
				<description>This directive is used to identify the short name(s)
					of the servicegroup(s) that the service belongs to.
					Multiple servicegroups should be separated by
					commas. This directive may be used as an alternative
					to using the members directive in servicegroup
					definitions.
				</description>
				<complexType>
					<ref alias="NAGIOS_Servicegroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
			<attribute attAlias="is_volatile">
				<description>This directive is used to denote whether the service
					is "volatile". Services are normally not volatile.
					More information on volatile service and how they
					differ from normal services can be found here.
					Value: 0 = service is not volatile, 1 = service is
					volatile.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="check_command">
				<description>This directive is used to specify the short name of
					the command that Nagios will run in order to check
					the status of the service. The maximum amount of
					time that the service check command can run is
					controlled by the service_check_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
	
			<attribute attAlias="check_command_arg">
				<description>The arguemnts for the check_command.</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="initial_state">
				<description>By default Nagios will assume that all services are
					in OK states when in starts. You can override the
					initial state for a service by using this directive.
					Valid options are: o = OK, w = WARNING, u = UNKNOWN,
					and c = CRITICAL.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="max_check_attempts">
				<description>This directive is used to define the number of times
					that Nagios will retry the service check command if
					it returns any state other than an OK state. Setting
					this value to 1 will cause Nagios to generate an
					alert without retrying the service check again.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="check_interval">
				<description>This directive is used to define the number of "time
					units" to wait before scheduling the next "regular"
					check of the service. "Regular" checks are those
					that occur when the service is in an OK state or
					when the service is in a non-OK state, but has
					already been rechecked max_check_attempts number of
					times. Unless you’ve changed the interval_length
					directive from the default value of 60, this number
					will mean minutes. More information on this value
					can be found in the check scheduling documentation.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retry_interval">
				<description>This directive is used to define the number of "time
					units" to wait before scheduling a re-check of the
					service. Services are rescheduled at the retry
					interval when they have changed to a non-OK state.
					Once the service has been retried max_check_attempts
					times without a change in its status, it will revert
					to being scheduled at its "normal" rate as defined
					by the check_interval value. Unless you’ve changed
					the interval_length directive from the default value
					of 60, this number will mean minutes. More
					information on this value can be found in the check
					scheduling documentation.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			
			<attribute attAlias="active_checks_enabled">
				<description>This directive is used to determine whether or not
					active checks of this service are enabled. Values: 0
					= disable active service checks, 1 = enable active
					service checks.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="passive_checks_enabled">
				<description>This directive is used to determine whether or not
					passive checks of this service are enabled. Values:
					0 = disable passive service checks, 1 = enable
					passive service checks.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="check_period">
				<description>This directive is used to specify the short name of
					the time period during which active checks of this
					service can be made.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			<attribute attAlias="obsess_over_service">
				<description>This directive determines whether or not checks for
					the service will be "obsessed" over using the
					ocsp_command.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="check_freshness">
				<description>This directive is used to determine whether or not
					freshness checks are enabled for this service.
					Values: 0 = disable freshness checks, 1 = enable
					freshness checks.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="freshness_threshold">
				<description>This directive is used to specify the freshness
					threshold (in seconds) for this service. If you set
					this directive to a value of 0, Nagios will
					determine a freshness threshold to use
					automatically.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="event_handler">
				<description>This directive is used
					to specify the short name of the command that should
					be run whenever a change in the state of the service
					is detected (i.e. whenever it goes down or
					recovers). Read the documentation on event handlers
					for a more detailed explanation of how to write
					scripts for handling events. The maximum amount of
					time that the event handler command can run is
					controlled by the event_handler_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			<attribute attAlias="event_handler_arg">
				<description>Arguments to the event handler command.</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			<attribute attAlias="event_handler_enabled">
				<description>This directive is used to determine whether or not
					the event handler for this service is enabled.
					Values: 0 = disable service event handler, 1 =
					enable service event handler. low_flap_threshold:
					This directive is used to specify the low state
					change threshold used in flap detection for this
					service. More information on flap detection can be
					found here. If you set this directive to a value of
					0, the program-wide value specified by the
					low_service_flap_threshold directive will be used.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="high_flap_threshold">
				<description>This directive is used to specify the high state
					change threshold used in flap detection for this
					service. More information on flap detection can be
					found here. If you set this directive to a value of
					0, the program-wide value specified by the
					high_service_flap_threshold directive will be used.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="flap_detection_enabled">
				<description>This directive is used to determine whether or not
					flap detection is enabled for this service. More
					information on flap detection can be found here.
					Values: 0 = disable service flap detection, 1 =
					enable service flap detection.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="flap_detection_options">
				<description>This directive is used to determine what service
					states the flap detection logic will use for this
					service. Valid options are a combination of one or
					more of the following: o = OK states, w = WARNING
					states, c = CRITICAL states, u = UNKNOWN states.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="process_perf_data">
				<description>This directive is used to determine whether or not
					the processing of performance data is enabled for
					this service. Values: 0 = disable performance data
					processing, 1 = enable performance data processing.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retain_status_information">
				<description>This directive is used to determine whether or not
					status-related information about the service is
					retained across program restarts. This is only
					useful if you have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable status information retention, 1 = enable
					status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retain_nonstatus_information">
				<description>This directive is used to determine whether or not
					non-status information about the service is retained
					across program restarts. This is only useful if you
					have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable non-status information retention, 1 = enable
					non-status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="notification_interval">
				<description>This directive is used to define the number of "time
					units" to wait before re-notifying a contact that
					this service is still in a non-OK state. Unless
					you’ve changed the interval_length directive from
					the default value of 60, this number will mean
					minutes. If you set this value to 0, Nagios will not
					re-notify contacts about problems for this service -
					only one problem notification will be sent out.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="first_notification_delay">
				<description>This directive is used to define the number of "time
					units" to wait before sending out the first problem
					notification when this service enters a non-OK
					state. Unless you’ve changed the interval_length
					directive from the default value of 60, this number
					will mean minutes. If you set this value to 0,
					Nagios will start sending out notifications
					immediately.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="notification_period">
				<description>This directive is used to specify the short name of
					the time period during which notifications of events
					for this service can be sent out to contacts. No
					service notifications will be sent out during times
					which is not covered by the time period.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			
			<attribute attAlias="notification_options">
				<description>This directive is used to determine when
					notifications for the service should be sent out.
					Valid options are a combination of one or more of
					the following: w = send notifications on a WARNING
					state, u = send notifications on an UNKNOWN state, c
					= send notifications on a CRITICAL state, r = send
					notifications on recoveries (OK state), f = send
					notifications when the service starts and stops
					flapping, and s = send notifications when scheduled
					downtime starts and ends. If you specify n (none) as
					an option, no service notifications will be sent
					out. If you do not specify any notification options,
					Nagios will assume that you want notifications to be
					sent out for all possible states. Example: If you
					specify w,r in this field, notifications will only
					be sent out when the service goes into a WARNING
					state and when it recovers from a WARNING state.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
	
			<attribute attAlias="notifications_enabled">
				<description>This directive is used to
					determine whether or not notifications for this
					service are enabled. Values: 0 = disable service
					notifications, 1 = enable service notifications.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="contacts">
				<description>This is a list of the short names of the
					contacts that should be notified whenever there are
					problems (or recoveries) with this service. Multiple
					contacts should be separated by commas. Useful if
					you want notifications to go to just a few people
					and don’t want to configure contact groups. You must
					specify at least one contact or contact group in
					each service definition.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contact"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
	
			<attribute attAlias="contact_groups">
				<description>This is a list of the short names of the contact
					groups that should be notified whenever there are
					problems (or recoveries) with this service. Multiple
					contact groups should be separated by commas. You
					must specify at least one contact or contact group
					in each service definition.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contactgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>		
			</attribute>
			
			<attribute attAlias="stalking_options">
				<description>This directive determines which service states
					"stalking" is enabled for. Valid options are a
					combination of one or more of the following: o =
					stalk on OK states, w = stalk on WARNING states, u =
					stalk on UNKNOWN states, and c = stalk on CRITICAL
					states. More information on state stalking can be
					found here. 
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="notes">
				<description>This directive is used to define
					an optional string of notes pertaining to the
					service. If you specify a note here, you will see
					the it in the extended information CGI (when you are
					viewing information about the specified service).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="notes_url">
				<description>This directive is used to define an optional URL
					that can be used to provide more information about
					the service. If you specify an URL, you will see a
					red folder icon in the CGIs (when you are viewing
					service information) that links to the URL you
					specify here. Any valid URL can be used. If you plan
					on using relative paths, the base path will the the
					same as what is used to access the CGIs (i.e.
					/cgi-bin/nagios/). This can be very useful if you
					want to make detailed information on the service,
					emergency contact methods, etc. available to other
					support staff.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="action_url">
				<description>This directive is used to define an optional URL
					that can be used to provide more actions to be
					performed on the service. If you specify an URL, you
					will see a red "splat" icon in the CGIs (when you
					are viewing service information) that links to the
					URL you specify here. Any valid URL can be used. If
					you plan on using relative paths, the base path will
					the the same as what is used to access the CGIs
					(i.e. /cgi-bin/nagios/).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="icon_image">
				<description>This variable is used to define the name of a GIF,
					PNG, or JPG image that should be associated with
					this service. This image will be displayed in the
					status and extended information CGIs. The image will
					look best if it is 40x40 pixels in size. Images for
					services are assumed to be in the logos/
					subdirectory in your HTML images directory (i.e.
					/usr/local/nagios/share/images/logos).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="icon_image_alt">
				<description>This variable is used to define an
					optional string that is used in the ALT tag of the
					image specified by the 'icon_image' argument. The
					ALT tag is used in the status, extended information
					and statusmap CGIs.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			
			<attribute attAlias="retry_check_interval">
				<description>Un documented in Nagios 3.x version.</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="normal_check_interval">
				<description>Un documented in Nagios 3.x version.</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="failure_prediction_enabled">
				<description>Un documented in Nagios 3.x version.</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="parallelize_check">
				<description>Un documented in Nagios 3.x version.</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">service</setSimpleValue>
		</template>

		<template alias="NAGIOS_Servicegroup" displayName="${servicegroup_name} Service Group">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>

			<attribute attAlias="servicegroup_name">
				<description>This directive is used to define a short name used
					to identify the service group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="alias">
				<description>This directive is used to define is a longer name or
					description used to identify the service group. It
					is provided in order to allow you to more easily
					identify a particular service group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="members">
				<description>This is a list of the descriptions of services (and
					the names of their corresponding hosts) that should
					be included in this group. Host and service names
					should be separated by commas. This directive may be
					used as an alternative to the servicegroups
					directive in service definitions. The format of the
					member directive is as follows (note that a host
					name must precede a service name/description):
					members='host1','service1','host2','service2',...'hostn','servicen'
				</description>
				<complexType>
					<ref alias="NAGIOS_Service" />
					<refType>
						<ref alias="BelongsTo" />
					</refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
			<attribute attAlias="servicegroup_members">
				<description>This optional directive can be used to include
					services from other "sub" service groups in this
					service group. Specify a comma-delimited list of
					short names of other service groups whose members
					should be included in this group.
				</description>
				<complexType>
					<ref alias="NAGIOS_Servicegroup" />
					<refType>
						<ref alias="BelongsTo" />
					</refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>

			</attribute>
			<attribute attAlias="notes">
				<description>
					This directive is used to define an optional string
					of notes pertaining to the service group. If you
					specify a note here, you will see the it in the
					extended information CGI (when you are viewing
					information about the specified service group).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="notes_url">
				<description>
					This directive is used to define an optional URL
					that can be used to provide more information about
					the service group. If you specify an URL, you will
					see a red folder icon in the CGIs (when you are
					viewing service group information) that links to the
					URL you specify here. Any valid URL can be used. If
					you plan on using relative paths, the base path will
					the the same as what is used to access the CGIs
					(i.e. /cgi-bin/nagios/). This can be very useful if
					you want to make detailed information on the service
					group, emergency contact methods, etc. available to
					other support staff.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="action_url">
				<description>
					This directive is used to define an optional URL
					that can be used to provide more actions to be
					performed on the service group. If you specify an
					URL, you will see a red "splat" icon in the CGIs
					(when you are viewing service group information)
					that links to the URL you specify here. Any valid
					URL can be used. If you plan on using relative
					paths, the base path will the the same as what is
					used to access the CGIs (i.e. /cgi-bin/nagios/).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">servicegroup</setSimpleValue>
	
		</template>

		<template alias="NAGIOS_Hostgroup" displayName="${hostgroup_name} - HostGroup">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>
			<attribute attAlias="hostgroup_name">
				<description>
					This directive is used to define a short name used
					to identify the host group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="alias">
				<description>
					This directive is used to define is a longer name or
					description used to identify the host group. It is
					provided in order to allow you to more easily
					identify a particular host group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="members">
				<description>
					This is a list of the short names of hosts that
					should be included in this group. Multiple host
					names should be separated by commas. This directive
					may be used as an alternative to (or in addition to)
					the hostgroups directive in host definitions.
				</description>
				<complexType>
					<ref alias="NAGIOS_Host"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
				
			</attribute>
			<attribute attAlias="hostgroup_members">
				<description>
					This optional directive can be used to include hosts
					from other "sub" host groups in this host group.
					Specify a comma-delimited list of short names of
					other host groups whose members should be included
					in this group.
				</description>
				<complexType>
					<ref alias="NAGIOS_Hostgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>			
			</attribute>

			<attribute attAlias="notes">
				<description>
					This directive is used to define an optional string
					of notes pertaining to the host. If you specify a
					note here, you will see the it in the extended
					information CGI (when you are viewing information
					about the specified host).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="notes_url">

				<description>
					This variable is used to define an optional URL that
					can be used to provide more information about the
					host group. If you specify an URL, you will see a
					red folder icon in the CGIs (when you are viewing
					hostgroup information) that links to the URL you
					specify here. Any valid URL can be used. If you plan
					on using relative paths, the base path will the the
					same as what is used to access the CGIs (i.e.
					/cgi-bin/nagios/). This can be very useful if you
					want to make detailed information on the host group,
					emergency contact methods, etc. available to other
					support staff.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="action_url">
				<description>
					This directive is used to define an optional URL
					that can be used to provide more actions to be
					performed on the host group. If you specify an URL,
					you will see a red "splat" icon in the CGIs (when
					you are viewing hostgroup information) that links to
					the URL you specify here. Any valid URL can be used.
					If you plan on using relative paths, the base path
					will the the same as what is used to access the CGIs
					(i.e. /cgi-bin/nagios/).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">hostgroup</setSimpleValue>
	
		</template>


		<template alias="NAGIOS_Host" displayName="${host_name} Host">
			<derivedFrom>
				<ref alias="NAGIOS"/>
			</derivedFrom>
			<description>A host definition is used to define a physical server,workstation, device, etc. that resides on your network.</description>

			<attribute attAlias="host_name">
				<description>
					This directive is used to define a short name used
					to identify the host. It is used in host group and
					service definitions to reference this particular
					host. Hosts can have multiple services (which are
					monitored) associated with them. When used properly,
					the $HOSTNAME$ macro will contain this short name.
					alias: This directive is used to define a longer
					name or description used to identify the host. It is
					provided in order to allow you to more easily
					identify a particular host. When used properly, the
					$HOSTALIAS$ macro will contain this
					alias/description.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			<attribute attAlias="alias">
				<description>
					This directive is used to define a longer name or
					description used to identify the host. It is provided in
					order to allow you to more easily identify a particular
					host. When used properly, the $HOSTALIAS$ macro will
					contain this alias/description.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="display_name">
				<description>
					This directive is used to define an alternate name
					that should be displayed in the web interface for
					this host. If not specified, this defaults to the
					value you specify for the host_name directive. Note:
					The current CGIs do not use this option, although
					future versions of the web interface will.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="address">
				<description>
					This directive is used to define the address of the
					host. Normally, this is an IP address, although it
					could really be anything you want (so long as it can
					be used to check the status of the host). You can
					use a FQDN to identify the host instead of an IP
					address, but if DNS services are not availble this
					could cause problems. When used properly, the
					$HOSTADDRESS$ macro will contain this address. Note:
					If you do not specify an address directive in a host
					definition, the name of the host will be used as its
					address. A word of caution about doing this, however
					- if DNS fails, most of your service checks will
					fail because the plugins will be unable to resolve
					the host name.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			
			<attribute attAlias="parents">
				<description>
					This directive is used to define a comma-delimited
					list of short names of the "parent" hosts for this
					particular host. Parent hosts are typically routers,
					switches, firewalls, etc. that lie between the
					monitoring host and a remote hosts. A router,
					switch, etc. which is closest to the remote host is
					considered to be that host’s "parent". Read the
					"Determining Status and Reachability of Network
					Hosts" document located here for more information.
					If this host is on the same network segment as the
					host doing the monitoring (without any intermediate
					routers, etc.) the host is considered to be on the
					local network and will not have a parent host. Leave
					this value blank if the host does not have a parent
					host (i.e. it is on the same segment as the Nagios
					host). The order in which you specify parent hosts
					has no effect on how things are monitored.
				</description>
				<complexType>
					<ref alias="NAGIOS_Host"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>			
			</attribute>

			<attribute attAlias="hostgroups">
				<description>
					This directive is used to identify the short name(s)
					of the hostgroup(s) that the host belongs to.
					Multiple hostgroups should be separated by commas.
					This directive may be used as an alternative to (or
					in addition to) using the members directive in
					hostgroup definitions.
				</description>
				<complexType>
					<ref alias="NAGIOS_Hostgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>			
			</attribute>
			
			<attribute attAlias="check_command_arg">
				<description>
					This directive is used to specify the short name of
					the command that should be used to check if the host
					is up or down. Typically, this command would try and
					ping the host to see if it is "alive". The command
					must return a status of OK (0) or Nagios will assume
					the host is down. If you leave this argument blank,
					the host will not be actively checked. Thus, Nagios
					will likely always assume the host is up (it may
					show up as being in a "PENDING" state in the web
					interface). This is useful if you are monitoring
					printers or other devices that are frequently turned
					off. The maximum amount of time that the
					notification command can run is controlled by the
					host_check_timeout option.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			<attribute attAlias="check_command">
				<description>
					This directive is used to specify the short name of
					the command that should be used to check if the host
					is up or down. Typically, this command would try and
					ping the host to see if it is "alive". The command
					must return a status of OK (0) or Nagios will assume
					the host is down. If you leave this argument blank,
					the host will not be actively checked. Thus, Nagios
					will likely always assume the host is up (it may
					show up as being in a "PENDING" state in the web
					interface). This is useful if you are monitoring
					printers or other devices that are frequently turned
					off. The maximum amount of time that the
					notification command can run is controlled by the
					host_check_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			
			<attribute attAlias="initial_state">
				<description>
					By default Nagios will assume that all hosts are in
					UP states when in starts. You can override the
					initial state for a host by using this directive.
					Valid options are: o = UP, d = DOWN, and u =
					UNREACHABLE.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="max_check_attempts">
				<description>
					This directive is used to define the number of times
					that Nagios will retry the host check command if it
					returns any state other than an OK state. Setting
					this value to 1 will cause Nagios to generate an
					alert without retrying the host check again. Note:
					If you do not want to check the status of the host,
					you must still set this to a minimum value of 1. To
					bypass the host check, just leave the check_command
					option blank.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="check_interval">
				<description>
					This directive is used to define the number of "time
					units" between regularly scheduled checks of the
					host. Unless you’ve changed the interval_length
					directive from the default value of 60, this number
					will mean minutes. More information on this value
					can be found in the check scheduling documentation.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retry_interval">
				<description>
					This directive is used to define the number of "time
					units" to wait before scheduling a re-check of the
					hosts. Hosts are rescheduled at the retry interval
					when they have changed to a non-UP state. Once the
					host has been retried max_check_attempts times
					without a change in its status, it will revert to
					being scheduled at its "normal" rate as defined by
					the check_interval value. Unless you’ve changed the
					interval_length directive from the default value of
					60, this number will mean minutes. More information
					on this value can be found in the check scheduling
					documentation. 
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			 
			

			<attribute attAlias="active_checks_enabled">
				<description>
					This directive is used to determine whether or not active
					checks (either regularly scheduled or on-demand) of
					this host are enabled. Values: 0 = disable active
					host checks, 1 = enable active host checks.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="passive_checks_enabled">
				<description>
					This directive is used to determine whether or not
					passive checks are enabled for this host. Values: 0
					= disable passive host checks, 1 = enable passive
					host checks.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="check_period">
				<description>
					This directive is used to specify the short name of
					the time period during which active checks of this
					host can be made.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>

			<attribute attAlias="obsess_over_host">
				<description>
					This directive determines whether or not checks for
					the host will be "obsessed" over using the
					ochp_command.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="check_freshness">
				<description>
					This directive is used to determine whether or not
					freshness checks are enabled for this host. Values:
					0 = disable freshness checks, 1 = enable freshness
					checks. freshness_threshold: This directive is used
					to specify the freshness threshold (in seconds) for
					this host. If you set this directive to a value of
					0, Nagios will determine a freshness threshold to
					use automatically. 
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="freshness_threshold">
				<description>
					This directive is used
					to specify the freshness threshold (in seconds) for
					this host. If you set this directive to a value of
					0, Nagios will determine a freshness threshold to
					use automatically. 
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="event_handler">
				<description>
					This directive is
					used to specify the short name of the command that
					should be run whenever a change in the state of the
					host is detected (i.e. whenever it goes down or
					recovers). Read the documentation on event handlers
					for a more detailed explanation of how to write
					scripts for handling events. The maximum amount of
					time that the event handler command can run is
					controlled by the event_handler_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			<attribute attAlias="event_handler_arg">
				<description>
					This directive is
					used to specify the short name of the command that
					should be run whenever a change in the state of the
					host is detected (i.e. whenever it goes down or
					recovers). Read the documentation on event handlers
					for a more detailed explanation of how to write
					scripts for handling events. The maximum amount of
					time that the event handler command can run is
					controlled by the event_handler_timeout option.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>


			<attribute attAlias="event_handler_enabled">
				<description>
					This directive is used to determine whether or not
					the event handler for this host is enabled. Values:
					0 = disable host event handler, 1 = enable host
					event handler. 
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="low_flap_threshold">
				<description>
					This directive is
					used to specify the low state change threshold used
					in flap detection for this host. More information on
					flap detection can be found here. If you set this
					directive to a value of 0, the program-wide value
					specified by the low_host_flap_threshold directive
					will be used.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="high_flap_threshold">
				<description>
					This directive is used to specify the high state
					change threshold used in flap detection for this
					host. More information on flap detection can be
					found here. If you set this directive to a value of
					0, the program-wide value specified by the
					high_host_flap_threshold directive will be used.					
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="flap_detection_enabled">
				<description>
					This directive is used to
					determine whether or not flap detection is enabled
					for this host. More information on flap detection
					can be found here. Values: 0 = disable host flap
					detection, 1 = enable host flap detection.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="flap_detection_options">
				<description>
					This directive is used to
					determine what host states the flap detection logic
					will use for this host. Valid options are a
					combination of one or more of the following: o = UP
					states, d = DOWN states, u = UNREACHABLE states.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="process_perf_data">
				<description>
					This directive is used to determine whether or not
					the processing of performance data is enabled for
					this host. Values: 0 = disable performance data
					processing, 1 = enable performance data processing.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="retain_status_information">
				<description>
					This directive is used to determine whether or not
					status-related information about the host is
					retained across program restarts. This is only
					useful if you have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable status information retention, 1 = enable
					status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retain_nonstatus_information">
				<description>
					This directive is used to determine whether or not
					non-status information about the host is retained
					across program restarts. This is only useful if you
					have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable non-status information retention, 1 = enable
					non-status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			
			<attribute attAlias="contacts">
				<description>
					This is a list of the short names of the contacts that
					should be notified whenever there are problems (or
					recoveries) with this host. Multiple contacts should
					be separated by commas. Useful if you want
					notifications to go to just a few people and don’t
					want to configure contact groups. You must specify
					at least one contact or contact group in each host
					definition. 
				</description>
				<complexType>
					<ref alias="NAGIOS_Contact"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			
			<attribute attAlias="contact_groups">
				<description>
					This is a list of the
					short names of the contact groups that should be
					notified whenever there are problems (or recoveries)
					with this host. Multiple contact groups should be
					separated by commas. You must specify at least one
					contact or contact group in each host definition.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contactgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			
			<attribute attAlias="notification_interval">
				<description>
					This directive is used to define the number of "time
					units" to wait before re-notifying a contact that
					this service is still down or unreachable. Unless
					you’ve changed the interval_length directive from
					the default value of 60, this number will mean
					minutes. If you set this value to 0, Nagios will not
					re-notify contacts about problems for this host -
					only one problem notification will be sent out.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="first_notification_delay">
				<description>
					This directive is used to define the number of "time
					units" to wait before sending out the first problem
					notification when this host enters a non-UP state.
					Unless you’ve changed the interval_length directive
					from the default value of 60, this number will mean
					minutes. If you set this value to 0, Nagios will
					start sending out notifications immediately.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>

			<attribute attAlias="notification_period">
				<description>
					This directive is used to specify the short name of
					the time period during which notifications of events
					for this host can be sent out to contacts. If a host
					goes down, becomes unreachable, or recoveries during
					a time which is not covered by the time period, no
					notifications will be sent out.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			<attribute attAlias="notification_options">
				<description>
					This directive is used to determine when
					notifications for the host should be sent out. Valid
					options are a combination of one or more of the
					following: d = send notifications on a DOWN state, u
					= send notifications on an UNREACHABLE state, r =
					send notifications on recoveries (OK state), f =
					send notifications when the host starts and stops
					flapping, and s = send notifications when scheduled
					downtime starts and ends. If you specify n (none) as
					an option, no host notifications will be sent out.
					If you do not specify any notification options,
					Nagios will assume that you want notifications to be
					sent out for all possible states. Example: If you
					specify d,r in this field, notifications will only
					be sent out when the host goes DOWN and when it
					recovers from a DOWN state.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="notifications_enabled">
				<description>
					This directive is used to determine whether or not
					notifications for this host are enabled. Values: 0 =
					disable host notifications, 1 = enable host
					notifications. stalking_options: This directive
					determines which host states "stalking" is enabled
					for. Valid options are a combination of one or more
					of the following: o = stalk on UP states, d = stalk
					on DOWN states, and u = stalk on UNREACHABLE states.
					More information on state stalking can be found
					here.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="stalking_options">
				<description>
					This directive
					determines which host states "stalking" is enabled
					for. Valid options are a combination of one or more
					of the following: o = stalk on UP states, d = stalk
					on DOWN states, and u = stalk on UNREACHABLE states.
					More information on state stalking can be found
					here.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
	
			<attribute attAlias="notes">
				<description>
					This directive is used to define an optional string
					of notes pertaining to the host. If you specify a
					note here, you will see the it in the extended
					information CGI (when you are viewing information
					about the specified host).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="notes_url">
				<description>
					This variable
					is used to define an optional URL that can be used
					to provide more information about the host. If you
					specify an URL, you will see a red folder icon in
					the CGIs (when you are viewing host information)
					that links to the URL you specify here. Any valid
					URL can be used. If you plan on using relative
					paths, the base path will the the same as what is
					used to access the CGIs (i.e. /cgi-bin/nagios/).
					This can be very useful if you want to make detailed
					information on the host, emergency contact methods,
					etc. available to other support staff.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="action_url">
				<description>
					This directive is used to define an optional URL
					that can be used to provide more actions to be
					performed on the host. If you specify an URL, you
					will see a red "splat" icon in the CGIs (when you
					are viewing host information) that links to the URL
					you specify here. Any valid URL can be used. If you
					plan on using relative paths, the base path will the
					the same as what is used to access the CGIs (i.e.
					/cgi-bin/nagios/).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			<attribute attAlias="icon_image">
				<description>
					This variable is used to define the name of a GIF,
					PNG, or JPG image that should be associated with
					this host. This image will be displayed in the
					various places in the CGIs. The image will look best
					if it is 40x40 pixels in size. Images for hosts are
					assumed to be in the logos/ subdirectory in your
					HTML images directory (i.e.
					/usr/local/nagios/share/images/logos).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			
			<attribute attAlias="icon_image_alt">
				<description>
					This variable is used to define an optional string
					that is used in the ALT tag of the image specified
					by the "icon_image" argument. 
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="vrml_image">
				<description>
					This variable is used to define the name of a GIF, PNG,
					or JPG image that should be associated with this
					host. This image will be used as the texture map for
					the specified host in the statuswrl CGI. Unlike the
					image you use for the "icon_image" variable, this
					one should probably not have any transparency. If it
					does, the host object will look a bit wierd. Images
					for hosts are assumed to be in the logos/
					subdirectory in your HTML images directory (i.e.
					/usr/local/nagios/share/images/logos).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="statusmap_image">
				<description>
					This variable is used to define the name of an image
					that should be associated with this host in the
					statusmap CGI. You can specify a JPEG, PNG, and GIF
					image if you want, although I would strongly suggest
					using a GD2 format image, as other image formats
					will result in a lot of wasted CPU time when the
					statusmap image is generated. GD2 images can be
					created from PNG images by using the pngtogd2
					utility supplied with Thomas Boutell’s gd library.
					The GD2 images should be created in uncompressed
					format in order to minimize CPU load when the
					statusmap CGI is generating the network map image.
					The image will look best if it is 40x40 pixels in
					size. You can leave these option blank if you are
					not using the statusmap CGI. Images for hosts are
					assumed to be in the logos/ subdirectory in your
					HTML images directory (i.e.
					/usr/local/nagios/share/images/logos).
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="x2d_coords">
				<description>
					This variable is used to define coordinates to use
					when drawing the host in the statusmap CGI.
					Coordinates should be given in positive integers, as
					they correspond to physical pixels in the generated
					image. The origin for drawing (0,0) is in the upper
					left hand corner of the image and extends in the
					positive x direction (to the right) along the top of
					the image and in the positive y direction (down)
					along the left hand side of the image. For
					reference, the size of the icons drawn is usually
					about 40x40 pixels (text takes a little extra
					space). The coordinates you specify here are for the
					upper left hand corner of the host icon that is
					drawn. Note: Don’t worry about what the maximum x
					and y coordinates that you can use are. The CGI will
					automatically calculate the maximum dimensions of
					the image it creates based on the largest x and y
					coordinates you specify.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="x3d_coords">
				<description>
					This variable is used to define coordinates to use
					when drawing the host in the statuswrl CGI.
					Coordinates can be positive or negative real
					numbers. The origin for drawing is (0.0,0.0,0.0).
					For reference, the size of the host cubes drawn is
					0.5 units on each side (text takes a little more
					space). The coordinates you specify here are used as
					the center of the host cube.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="failure_prediction_enabled">
				<description>
					Undocumented in Nagios 3.x version.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">host</setSimpleValue>
		</template>

		<template alias="NAGIOS_Contact" displayName="${contact_name} Contact">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>
			<attribute attAlias="contact_name">
				<description>
					This directive is used to define a short name used
					to identify the contact. It is referenced in contact
					group definitions. Under the right circumstances,
					the $CONTACTNAME$ macro will contain this value.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="alias">
				<description>
					This directive is used to define a longer name or
					description for the contact. Under the rights
					circumstances, the $CONTACTALIAS$ macro will contain
					this value. If not specified, the contact_name will
					be used as the alias.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="contactgroups">
				<description>
					This directive is used to identify the short name(s)
					of the contactgroup(s) that the contact belongs to.
					Multiple contactgroups should be separated by
					commas. This directive may be used as an alternative
					to (or in addition to) using the members directive
					in contactgroup definitions.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contactgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<attribute attAlias="host_notifications_enabled">
				<description>
					This directive is used to determine whether or not
					the contact will receive notifications about host
					problems and recoveries. Values: 0 = don’t send
					notifications, 1 = send notifications.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="service_notifications_enabled">
				<description>
					This directive is
					used to determine whether or not the contact will
					receive notifications about service problems and
					recoveries. Values: 0 = don’t send notifications, 1
					= send notifications.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
	
			<attribute attAlias="host_notification_period">
				<description>
					This directive is used to specify the short name of
					the time period during which the contact can be
					notified about host problems or recoveries. You can
					think of this as an "on call" time for host
					notifications for the contact. Read the
					documentation on time periods for more information
					on how this works and potential problems that may
					result from improper use.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>
			<attribute attAlias="service_notification_period">
				<description>
					This directive is used to specify the short name of
					the time period during which the contact can be
					notified about service problems or recoveries. You
					can think of this as an "on call" time for service
					notifications for the contact. Read the
					documentation on time periods for more information
					on how this works and potential problems that may
					result from improper use.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
			</attribute>

			<attribute attAlias="host_notification_commands">
				<description>
					This directive is used to define a list of the short
					names of the commands used to notify the contact of
					a host problem or recovery. Multiple notification
					commands should be separated by commas. All
					notification commands are executed when the contact
					needs to be notified. The maximum amount of time
					that a notification command can run is controlled by
					the notification_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<attribute attAlias="host_notification_options">
				<description>
					This directive is used to define the host states for
					which notifications can be sent out to this contact.
					Valid options are a combination of one or more of
					the following: d = notify on DOWN host states, u =
					notify on UNREACHABLE host states, r = notify on
					host recoveries (UP states), f = notify when the
					host starts and stops flapping, and s = send
					notifications when host or service scheduled
					downtime starts and ends. If you specify n (none) as
					an option, the contact will not receive any type of
					host notifications.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>

			<attribute attAlias="service_notification_options">
				<description>
					This directive is used to define the service states
					for which notifications can be sent out to this
					contact. Valid options are a combination of one or
					more of the following: w = notify on WARNING service
					states, u = notify on UNKNOWN service states, c =
					notify on CRITICAL service states, r = notify on
					service recoveries (OK states), and f = notify when
					the service starts and stops flapping. If you
					specify n (none) as an option, the contact will not
					receive any type of service notifications.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="service_notification_commands">
				<description>
					This directive is used to define a list of the short
					names of the commands used to notify the contact of
					a service problem or recovery. Multiple notification
					commands should be separated by commas. All
					notification commands are executed when the contact
					needs to be notified. The maximum amount of time
					that a notification command can run is controlled by
					the notification_timeout option.
				</description>
				<complexType>
					<ref alias="NAGIOS_Command"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<attribute attAlias="email">
				<description>

					This directive is used to define an email address
					for the contact. Depending on how you configure your
					notification commands, it can be used to send out an
					alert email to the contact. Under the right
					circumstances, the $CONTACTEMAIL$ macro will contain
					this value.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="pager">
				<description>
					This directive is used to define a pager number for
					the contact. It can also be an email address to a
					pager gateway (i.e. pagejoe@pagenet.com). Depending
					on how you configure your notification commands, it
					can be used to send out an alert page to the
					contact. Under the right circumstances, the
					$CONTACTPAGER$ macro will contain this value.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="address">
				<description>
					Address directives are used to define additional
					"addresses" for the contact. These addresses can be
					anything - cell phone numbers, instant messaging
					addresses, etc. Depending on how you configure your
					notification commands, they can be used to send out
					an alert o the contact. Up to six addresses can be
					defined using these directives (address1 through
					address6). The $CONTACTADDRESSx$ macro will contain
					this value.
				</description>
				<simpleType>xs:string</simpleType>
				<policy>
					<maxOccurs>6</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>
			</attribute>
			<attribute attAlias="can_submit_commands">
				<description>
					This directive is used to determine whether or not
					the contact can submit external commands to Nagios
					from the CGIs. Values: 0 = don’t allow contact to
					submit commands, 1 = allow contact to submit
					commands.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retain_status_information">
				<description>
					This directive is used to determine whether or not
					status-related information about the contact is
					retained across program restarts. This is only
					useful if you have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable status information retention, 1 = enable
					status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<attribute attAlias="retain_nonstatus_information">

				<description>
					This directive is used to determine whether or not
					non-status information about the contact is retained
					across program restarts. This is only useful if you
					have enabled state retention using the
					retain_state_information directive. Value: 0 =
					disable non-status information retention, 1 = enable
					non-status information retention.
				</description>
				<simpleType>xs:integer</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">contact</setSimpleValue>
		</template>

		<template alias="NAGIOS_Contactgroup" displayName="${contactgroup_name} Contact Group">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>
			<attribute attAlias="contactgroup_name">
				<description>
					This directive is a short name used to identify the
					contact group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="alias">
				<description>
					This directive is used to define a longer name or
					description used to identify the contact group.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="members">
				<description>
					This directive is used to define a list of the short
					names of contacts that should be included in this
					group. Multiple contact names should be separated by
					commas. This directive may be used as an alternative
					to (or in addition to) using the contactgroups
					directive in contact definitions.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contact"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<attribute attAlias="contactgroup_members">
				<description>
					This optional directive can be used to include
					contacts from other "sub" contact groups in this
					contact group. Specify a comma-delimited list of
					short names of other contact groups whose members
					should be included in this group.
				</description>
				<complexType>
					<ref alias="NAGIOS_Contactgroup"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<setSimpleValue attAlias="objectType">contactgroup</setSimpleValue>
	
		</template>
		<template alias="NAGIOS_Timeperiod" displayName="${timeperiod_name} Timeperiod">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>

			<attribute attAlias="timeperiod_name">
				<description>
					This directives is the short name used to identify
					the time period. alias: This directive is a longer
					name or description used to identify the time
					period.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="alias">
				<description>
					This directive is a longer
					name or description used to identify the time
					period.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="weekday">
				<description>
					The weekday directives ("sunday" through
					"saturday")are comma-delimited lists of time ranges
					that are "valid" times for a particular day of the
					week. Notice that there are seven different days for
					which you can define time ranges (Sunday through
					Saturday). Each time range is in the form of
					HH:MM-HH:MM, where hours are specified on a 24 hour
					clock. For example, 00:15-24:00 means 12:15am in the
					morning for this day until 12:00am midnight (a 23
					hour, 45 minute total time range). If you wish to
					exclude an entire day from the timeperiod, simply do
					not include it in the timeperiod definition.
				</description>
				<simpleType>xs:string</simpleType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>

			</attribute>
			<attribute attAlias="exception">
				<description>
					You can specify several different types of
					exceptions to the standard rotating weekday
					schedule. Exceptions can take a number of different
					forms including single days of a specific or generic
					month, single weekdays in a month, or single
					calendar dates. You can also specify a range of
					days/dates and even specify skip intervals to obtain
					functionality described by "every 3 days between
					these dates". Rather than list all the possible
					formats for exception strings, I’ll let you look at
					the example timeperiod definitions above to see
					what’s possible. :-) Weekdays and different types of
					exceptions all have different levels of precedence,
					so its important to understand how they can affect
					each other. More information on this can be found in
					the documentation on timeperiods.
				</description>
				<simpleType>xs:string</simpleType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>

			</attribute>
			<attribute attAlias="exclude">
				<description>
					This directive is used to specify the short names of
					other timeperiod definitions whose time ranges
					should be excluded from this timeperiod. Multiple
					timeperiod names should be separated with a comma.
				</description>
				<complexType>
					<ref alias="NAGIOS_Timeperiod"/>
					<refType><ref alias="BelongsTo"/></refType>
				</complexType>
				<policy>
					<maxOccurs>unbound</maxOccurs>
					<minOccurs>0</minOccurs>
				</policy>	
			</attribute>
			<setSimpleValue attAlias="objectType">timeperiod</setSimpleValue>
	
		</template>

		<template alias="NAGIOS_Command" displayName="${command_name} CMD">
			<derivedFrom>
				<ref alias="NAGIOS" />
			</derivedFrom>

			<attribute attAlias="command_name">
				<description>
					This directive is the short name used to identify
					the command. It is referenced in contact, host, and
					service definitions (in notification, check, and
					event handler directives), among other places.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<attribute attAlias="command_line">
				<description>
					This directive is used to define what is actually
					executed by Nagios when the command is used for
					service or host checks, notifications, or event
					handlers. Before the command line is executed, all
					valid macros are replaced with their respective
					values. See the documentation on macros for
					determining when you can use different macros. Note
					that the command line is not surrounded in quotes.
					Also, if you want to pass a dollar sign ($) on the
					command line, you have to escape it with another
					dollar sign.
				</description>
				<simpleType>xs:string</simpleType>
			</attribute>
			<setSimpleValue attAlias="objectType">command</setSimpleValue>
		</template>
	<template alias="Nagios_MDR_Config" displayName="${name}">
		<derivedFrom>
			<ref alias="MDR_ConfigEntry"/>
		</derivedFrom>
		<description>Handle Nagios data to/from CMDB</description>
		<attribute attAlias="importDir" displayName="Import Directory">
			<description>If this entry should be an instances and a template.</description>
			<simpleType>xs:string</simpleType>
		</attribute>
		<attribute attAlias="exportDir" displayName="Export Directory">
			<description>If this entry should be an instances and a template.</description>
			<simpleType>xs:string</simpleType>
		</attribute>
				
		<setSimpleValue attAlias="name" >Nagios2CMDB Config</setSimpleValue>
	</template>

<template alias="NAGIOS_Serviceextinfo" displayName="${name}">
		<derivedFrom><ref alias="NAGIOS"/></derivedFrom>
		<attribute attAlias="host_name">
			<description>
				This variable is used to identify the short name of the
				host which the data is associated with.
			</description>
			<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
		</attribute>
			
	<attribute attAlias="service_description">
		<simpleType>xs:string</simpleType>
	</attribute>	

	<attribute attAlias="notes">
			<simpleType>xs:string</simpleType>
	</attribute>	
	<attribute attAlias="notes_url">
			<simpleType>xs:anyURI</simpleType>
	</attribute>	
	<attribute attAlias="action_url">
			<simpleType>xs:anyURI</simpleType>
	</attribute>	
	<attribute attAlias="icon_image">
			<simpleType>xs:string</simpleType>
	</attribute>	
	<attribute attAlias="icon_image_alt">
			<simpleType>xs:string</simpleType>
	</attribute>
</template>



	<template alias="NAGIOS_Servicedependency" displayName="${host_name}">
		<derivedFrom><ref alias="NAGIOS"/></derivedFrom>
   	
 		<attribute attAlias="dependent_service_description">
			<complexType>
				<ref alias="NAGIOS_Service" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
	
		<attribute attAlias="service_description">
			<complexType>
				<ref alias="NAGIOS_Service" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
	
		<attribute attAlias="dependent_host_name">
			<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
		<attribute attAlias="host_name">
		<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
		<attribute attAlias="inherits_parent">
			<simpleType>xs:string</simpleType>
	</attribute>		
		<attribute attAlias="execution_failure_criteria">
			<simpleType>xs:string</simpleType>
	</attribute>		
		<attribute attAlias="notification_failure_criteria">
			<simpleType>xs:string</simpleType>
	</attribute>		
	</template>

	<template alias="NAGIOS_Hostdependency" displayName="${host_name}">
		<derivedFrom><ref alias="NAGIOS"/></derivedFrom>
		<attribute attAlias="dependent_host_name">
			<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
		<attribute attAlias="host_name">
		<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
			<policy>
				<maxOccurs>unbound</maxOccurs>
			</policy>
	</attribute>		
		<attribute attAlias="inherits_parent">
			<simpleType>xs:string</simpleType>
	</attribute>		
		<attribute attAlias="execution_failure_criteria">
			<simpleType>xs:string</simpleType>
	</attribute>		
		<attribute attAlias="notification_failure_criteria">
			<simpleType>xs:string</simpleType>
	</attribute>		
   	
	</template>
	<template alias="NAGIOS_Hostextinfo" displayName="${name}">
		<derivedFrom><ref alias="NAGIOS"/></derivedFrom>
		<attribute attAlias="host_name">
			<description>
				This variable is used to identify the short name of the
				host which the data is associated with.
			</description>
			<complexType>
				<ref alias="NAGIOS_Host" />
				<refType>
					<ref alias="BelongsTo" />
				</refType>
			</complexType>
		</attribute>

		<attribute attAlias="notes">
			<description>
				This directive is used to define an optional string of
				notes pertaining to the host. If you specify a note
				here, you will see the it in the extended information
				CGI (when you are viewing information about the
				specified host).
			</description>
			<simpleType>xs:string</simpleType>
		</attribute>

		<attribute attAlias="notes_url">
			<description>
				This variable is used to define an optional URL that can
				be used to provide more information about the host. If
				you specify an URL, you will see a link that says "Extra
				Host Notes" in the extended information CGI (when you
				are viewing information about the specified host). Any
				valid URL can be used. If you plan on using relative
				paths, the base path will the the same as what is used
				to access the CGIs (i.e. /cgi-bin/nagios/). This can be
				very useful if you want to make detailed information on
				the host, emergency contact methods, etc. available to
				other support staff.
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>

		<attribute attAlias="action_url">
			<description>
				This directive is used to define an optional URL that
				can be used to provide more actions to be performed on
				the host. If you specify an URL, you will see a link
				that says "Extra Host Actions" in the extended
				information CGI (when you are viewing information about
				the specified host). Any valid URL can be used. If you
				plan on using relative paths, the base path will the the
				same as what is used to access the CGIs (i.e.
				/cgi-bin/nagios/).
			</description>
			<simpleType>xs:anyURI</simpleType>

		</attribute>

		<attribute attAlias="icon_image">
			<description>
				This variable is used to define the name of a GIF, PNG,
				or JPG image that should be associated with this host.
				This image will be displayed in the status and extended
				information CGIs. The image will look best if it is
				40x40 pixels in size. Images for hosts are assumed to be
				in the logos/ subdirectory in your HTML images directory
				(i.e. /usr/local/nagios/share/images/logos).
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>

		<attribute attAlias="icon_image_alt">
			<description>
				This variable is used to define an optional string that
				is used in the ALT tag of the image specified by the
				'icon_image' argument. The ALT tag is used in the
				status, extended information and statusmap CGIs.
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>
		<attribute attAlias="gd2_image">
			<simpleType>xs:string</simpleType>

		</attribute>
		<attribute attAlias="vrml_image">
			<description>
				: This variable is used to define the name of a GIF,
				PNG, or JPG image that should be associated with this
				host. This image will be used as the texture map for the
				specified host in the statuswrl CGI. Unlike the image
				you use for the 'icon_image' variable, this one should
				probably not have any transparency. If it does, the host
				object will look a bit wierd. Images for hosts are
				assumed to be in the logos/ subdirectory in your HTML
				images directory (i.e.
				/usr/local/nagios/share/images/logos).
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>
		<attribute attAlias="statusmap_image">
			<description>
				This variable is used to define the name of an image
				that should be associated with this host in the
				statusmap CGI. You can specify a JPEG, PNG, and GIF
				image if you want, although I would strongly suggest
				using a GD2 format image, as other image formats will
				result in a lot of wasted CPU time when the statusmap
				image is generated. GD2 images can be created from PNG
				images by using the pngtogd2 utility supplied with
				Thomas Boutell’s gd library. The GD2 images should be
				created in uncompressed format in order to minimize CPU
				load when the statusmap CGI is generating the network
				map image. The image will look best if it is 40x40
				pixels in size. You can leave these option blank if you
				are not using the statusmap CGI. Images for hosts are
				assumed to be in the logos/ subdirectory in your HTML
				images directory (i.e.
				/usr/local/nagios/share/images/logos).
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>

		<attribute attAlias="x2d_coords">
			<description>
				This variable is used to define coordinates to use when
				drawing the host in the statusmap CGI. Coordinates
				should be given in positive integers, as they correspond
				to physical pixels in the generated image. The origin
				for drawing (0,0) is in the upper left hand corner of
				the image and extends in the positive x direction (to
				the right) along the top of the image and in the
				positive y direction (down) along the left hand side of
				the image. For reference, the size of the icons drawn is
				usually about 40x40 pixels (text takes a little extra
				space). The coordinates you specify here are for the
				upper left hand corner of the host icon that is drawn.
				Note: Don’t worry about what the maximum x and y
				coordinates that you can use are. The CGI will
				automatically calculate the maximum dimensions of the
				image it creates based on the largest x and y
				coordinates you specify.
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>

		<attribute attAlias="x3d_coords">
			<description>
				This variable is used to define coordinates to use when
				drawing the host in the statuswrl CGI. Coordinates can
				be positive or negative real numbers. The origin for
				drawing is (0.0,0.0,0.0). For reference, the size of the
				host cubes drawn is 0.5 units on each side (text takes a
				little more space). The coordinates you specify here are
				used as the center of the host cube.
			</description>
			<simpleType>xs:string</simpleType>

		</attribute>
	</template>
	
	
	</templates>
<instances>
	<MDR_Repository alias="MDR_NAGIOS-1">
		<name>Nagios</name>
		<configAlias>Nagios_MDR_Config</configAlias>
	</MDR_Repository>
	
	
	<Nagios_MDR_Config alias="ExportToNagios_mdr-1">
		<mdrRepository><ref alias="MDR_NAGIOS-1"/></mdrRepository>
		<name>Export Nagios</name>
		<program>bin/export-nagios</program>
		<exportDir>export</exportDir>
	</Nagios_MDR_Config>
	
	<Nagios_MDR_Config alias="ImportNagios_mdr-1">
		<mdrRepository><ref alias="MDR_NAGIOS-1"/></mdrRepository>
		<name>Import Nagios</name>
		<program>bin/import-nagios</program>
		<importDir>import</importDir>
	</Nagios_MDR_Config>
</instances>
</onecmdb>
